{"ast":null,"code":"export const convertToWorkerObjects = data => {\n  // Define the header row, which will be used to map the data to the correct keys\n  const headers = ['friendlyName', 'contact_uri', 'full_name', 'email', 'roles', 'skills', 'language'];\n  let isFirstRow = true;\n\n  // Convert the CSV data to worker objects\n  const workerObjects = data.map(row => {\n    if (isFirstRow) {\n      isFirstRow = false;\n      return {};\n    }\n    const worker = {};\n    worker.attributes = {};\n    headers.forEach((header, index) => {\n      if (header === 'roles' || header === 'skills') {\n        // Split comma-separated values into arrays\n        worker.attributes[header] = row[index].split(',');\n      } else if (header === 'friendlyName') {\n        worker[header] = row[index];\n      } else {\n        worker.attributes[header] = row[index];\n      }\n    });\n    return worker;\n  });\n  return workerObjects;\n};","map":{"version":3,"names":["convertToWorkerObjects","data","headers","isFirstRow","workerObjects","map","row","worker","attributes","forEach","header","index","split"],"sources":["/Users/nicolas.sementilli/Documents/Best Buy/Code/worker-csv/src/utils/convertToWorkerObjects.js"],"sourcesContent":["export const convertToWorkerObjects = (data) => {\n  // Define the header row, which will be used to map the data to the correct keys\n  const headers = [\n    'friendlyName',\n    'contact_uri',\n    'full_name',\n    'email',\n    'roles',\n    'skills',\n    'language',\n  ];\n\n  let isFirstRow = true;\n\n  // Convert the CSV data to worker objects\n  const workerObjects = data.map((row) => {\n    if (isFirstRow) {\n      isFirstRow = false;\n      return {};\n    }\n    const worker = {};\n    worker.attributes = {};\n    headers.forEach((header, index) => {\n      if (header === 'roles' || header === 'skills') {\n        // Split comma-separated values into arrays\n        worker.attributes[header] = row[index].split(',');\n      } else if (header === 'friendlyName') {\n        worker[header] = row[index];\n      } else {\n        worker.attributes[header] = row[index];\n      }\n    });\n    return worker;\n  });\n\n  return workerObjects;\n};\n"],"mappings":"AAAA,OAAO,MAAMA,sBAAsB,GAAIC,IAAI,IAAK;EAC9C;EACA,MAAMC,OAAO,GAAG,CACd,cAAc,EACd,aAAa,EACb,WAAW,EACX,OAAO,EACP,OAAO,EACP,QAAQ,EACR,UAAU,CACX;EAED,IAAIC,UAAU,GAAG,IAAI;;EAErB;EACA,MAAMC,aAAa,GAAGH,IAAI,CAACI,GAAG,CAAEC,GAAG,IAAK;IACtC,IAAIH,UAAU,EAAE;MACdA,UAAU,GAAG,KAAK;MAClB,OAAO,CAAC,CAAC;IACX;IACA,MAAMI,MAAM,GAAG,CAAC,CAAC;IACjBA,MAAM,CAACC,UAAU,GAAG,CAAC,CAAC;IACtBN,OAAO,CAACO,OAAO,CAAC,CAACC,MAAM,EAAEC,KAAK,KAAK;MACjC,IAAID,MAAM,KAAK,OAAO,IAAIA,MAAM,KAAK,QAAQ,EAAE;QAC7C;QACAH,MAAM,CAACC,UAAU,CAACE,MAAM,CAAC,GAAGJ,GAAG,CAACK,KAAK,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC;MACnD,CAAC,MAAM,IAAIF,MAAM,KAAK,cAAc,EAAE;QACpCH,MAAM,CAACG,MAAM,CAAC,GAAGJ,GAAG,CAACK,KAAK,CAAC;MAC7B,CAAC,MAAM;QACLJ,MAAM,CAACC,UAAU,CAACE,MAAM,CAAC,GAAGJ,GAAG,CAACK,KAAK,CAAC;MACxC;IACF,CAAC,CAAC;IACF,OAAOJ,MAAM;EACf,CAAC,CAAC;EAEF,OAAOH,aAAa;AACtB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}