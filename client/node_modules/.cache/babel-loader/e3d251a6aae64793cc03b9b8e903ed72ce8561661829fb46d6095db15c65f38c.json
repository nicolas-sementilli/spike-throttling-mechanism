{"ast":null,"code":"var _jsxFileName = \"/Users/nicolas.sementilli/Documents/Best Buy/Code/Spike-Throttling-Mechanism/client/src/components/CreateWorkers.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport CSVReader from 'react-csv-reader';\nimport { convertToWorkerObjects } from '../utils/convertToWorkerObjects';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CreateWorkers = () => {\n  _s();\n  // State to store the workers information\n  const [workers, setWorkers] = useState([]);\n  // State to store the response status from the server after creating the workers\n  const [responseStatus, setResponseStatus] = useState('');\n\n  // This function will be called when the CSV file has been loaded\n  const handleFileLoad = data => {\n    // Converts the loaded data into worker objects\n    const workerObjects = convertToWorkerObjects(data);\n    // Updates the state with the worker objects\n    setWorkers(workerObjects);\n  };\n\n  // This function will be called when the \"Create Workers\" button is clicked\n  const handleCreateWorkers = async () => {\n    console.log(workers);\n    // Sends a POST request to the server to create the workers\n    const response = await fetch('http://localhost:4000/createWorkers', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        workers: workers\n      })\n    });\n    // Parses the JSON response from the server\n    const json = await response.json();\n    console.log(json.message);\n    // Updates the response status with the message from the server\n    setResponseStatus(json.message);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(CSVReader, {\n      onFileLoaded: handleFileLoad\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCreateWorkers,\n      children: \"Create Workers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), responseStatus && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: responseStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 26\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(CreateWorkers, \"E5Uj46s0v/dMLlO/xszvTGX8RUo=\");\n_c = CreateWorkers;\nexport default CreateWorkers;\nvar _c;\n$RefreshReg$(_c, \"CreateWorkers\");","map":{"version":3,"names":["React","useState","CSVReader","convertToWorkerObjects","CreateWorkers","workers","setWorkers","responseStatus","setResponseStatus","handleFileLoad","data","workerObjects","handleCreateWorkers","console","log","response","fetch","method","headers","body","JSON","stringify","json","message"],"sources":["/Users/nicolas.sementilli/Documents/Best Buy/Code/Spike-Throttling-Mechanism/client/src/components/CreateWorkers.js"],"sourcesContent":["import React, { useState } from 'react';\nimport CSVReader from 'react-csv-reader';\nimport { convertToWorkerObjects } from '../utils/convertToWorkerObjects';\n\nconst CreateWorkers = () => {\n  // State to store the workers information\n  const [workers, setWorkers] = useState([]);\n  // State to store the response status from the server after creating the workers\n  const [responseStatus, setResponseStatus] = useState('');\n\n  // This function will be called when the CSV file has been loaded\n  const handleFileLoad = (data) => {\n    // Converts the loaded data into worker objects\n    const workerObjects = convertToWorkerObjects(data);\n    // Updates the state with the worker objects\n    setWorkers(workerObjects);\n  };\n\n  // This function will be called when the \"Create Workers\" button is clicked\n  const handleCreateWorkers = async () => {\n    console.log(workers);\n    // Sends a POST request to the server to create the workers\n    const response = await fetch('http://localhost:4000/createWorkers', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ workers: workers }),\n    });\n    // Parses the JSON response from the server\n    const json = await response.json();\n    console.log(json.message);\n    // Updates the response status with the message from the server\n    setResponseStatus(json.message);\n  };\n\n  return (\n    <div>\n      {/* Renders the CSVReader component */}\n      <CSVReader onFileLoaded={handleFileLoad} />\n      {/* Renders the \"Create Workers\" button */}\n      <button onClick={handleCreateWorkers}>Create Workers</button>\n      {/* Renders the response status if it exists */}\n      {responseStatus && <div>{responseStatus}</div>}\n    </div>\n  );\n};\n\nexport default CreateWorkers;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,SAAS,MAAM,kBAAkB;AACxC,SAASC,sBAAsB,QAAQ,iCAAiC;AAAC;AAEzE,MAAMC,aAAa,GAAG,MAAM;EAAA;EAC1B;EACA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EAC1C;EACA,MAAM,CAACM,cAAc,EAAEC,iBAAiB,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;;EAExD;EACA,MAAMQ,cAAc,GAAIC,IAAI,IAAK;IAC/B;IACA,MAAMC,aAAa,GAAGR,sBAAsB,CAACO,IAAI,CAAC;IAClD;IACAJ,UAAU,CAACK,aAAa,CAAC;EAC3B,CAAC;;EAED;EACA,MAAMC,mBAAmB,GAAG,YAAY;IACtCC,OAAO,CAACC,GAAG,CAACT,OAAO,CAAC;IACpB;IACA,MAAMU,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,EAAE;MAClEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEhB,OAAO,EAAEA;MAAQ,CAAC;IAC3C,CAAC,CAAC;IACF;IACA,MAAMiB,IAAI,GAAG,MAAMP,QAAQ,CAACO,IAAI,EAAE;IAClCT,OAAO,CAACC,GAAG,CAACQ,IAAI,CAACC,OAAO,CAAC;IACzB;IACAf,iBAAiB,CAACc,IAAI,CAACC,OAAO,CAAC;EACjC,CAAC;EAED,oBACE;IAAA,wBAEE,QAAC,SAAS;MAAC,YAAY,EAAEd;IAAe;MAAA;MAAA;MAAA;IAAA,QAAG,eAE3C;MAAQ,OAAO,EAAEG,mBAAoB;MAAA,UAAC;IAAc;MAAA;MAAA;MAAA;IAAA,QAAS,EAE5DL,cAAc,iBAAI;MAAA,UAAMA;IAAc;MAAA;MAAA;MAAA;IAAA,QAAO;EAAA;IAAA;IAAA;IAAA;EAAA,QAC1C;AAEV,CAAC;AAAC,GA1CIH,aAAa;AAAA,KAAbA,aAAa;AA4CnB,eAAeA,aAAa;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}